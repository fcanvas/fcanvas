import{_ as s,o as a,c as e,a as n}from"./app.9397061b.js";const D=JSON.parse('{"title":"Custom Shape","description":"","frontmatter":{},"headers":[],"relativePath":"guide/shapes/Custom.md","lastUpdated":1677945797000}'),o={name:"guide/shapes/Custom.md"},l=n(`<h1 id="custom-shape" tabindex="-1">Custom Shape <a class="header-anchor" href="#custom-shape" aria-hidden="true">#</a></h1><p>To create a custom shape with <code>fcanvas</code>, we can instantiate a <code>Shape</code> object.</p><p>When creating a custom shape, we need to define a drawing function that is passed a <a href="/guide/essentials/Shape">Shape</a> renderer and a shape instance:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Shape</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">fill</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#00D2FF</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sceneFunc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">beginPath</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// don&#39;t need to set position of rect, fCanvas will handle it</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rect</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">height</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// (!) fCanvas specific method, it is very important</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// it will apply are required styles</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">fillStrokeScene</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p><code>Shape</code> is a wrapper around native 2d canvas context that have the same properties and methods with some additional API.</p><p>We can use the renderer to access the HTML5 Canvas context, and to use special methods like <code>this.fillStrokeScene()</code> which automatically handles filling, stroking, and applying shadows.</p><p>There are two properties that can be used for drawing custom shapes: <code>sceneFunc</code>.</p><p><code>sceneFunc</code> should be used to define visual appearance of a shape. <code>Konva</code> will use <code>sceneFunc</code> for drawing its hit graph for events detecting. So in many cases you just need to define <code>sceneFunc</code> only</p><h3 id="some-best-practices-for-writing-scenefunc" tabindex="-1">Some best practices for writing <code>sceneFunc</code>: <a class="header-anchor" href="#some-best-practices-for-writing-scenefunc" aria-hidden="true">#</a></h3><ol><li><p>Make it as optimal, as possible because that function can be called many times per second. It is not ok to create images (<code>document.createElement(&#39;image&#39;)</code> or <code>new window.Image()</code>) or other large objects here.</p></li><li><p>The function should not have any side effects like moving shapes, attaching events or changing state of your app.</p></li><li><p>If you want to apply complex styles to the canvas manually or draw images.</p></li><li><p>Do not apply position and scaling in <code>sceneFunc</code> manually. <code>fcanvas</code> can handle it automatically if you set that properties into shape instance directly. Example: <code>this.$.x = 10</code>.</p></li><li><p>If possible do not apply styles in <code>sceneFunc</code> manually. Just draw a shape with some paths. <code>this.fillStrokeScene()</code> function at the and will do all styling work.</p></li></ol><p>For a full list of attributes and methods, check out the <a href="/guide/essentials/Shape">Shape documentation</a></p>`,11),p=[l];function t(c,r,i,y,d,F){return a(),e("div",null,p)}const C=s(o,[["render",t]]);export{D as __pageData,C as default};
